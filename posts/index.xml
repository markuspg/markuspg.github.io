<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
	<channel>
		<title>Posts on Programming Pilgrim</title>
		<link>https://markuspg.github.io/posts/</link>
		<description>Recent content in Posts on Programming Pilgrim</description>
		<generator>Hugo -- gohugo.io</generator>
		<language>en-us</language>
		<copyright>This work is licensed under a Creative Commons Attribution ShareAlike 4.0 International License.</copyright>
		<lastBuildDate>Thu, 09 Apr 2020 17:24:56 +0200</lastBuildDate>
		<atom:link href="https://markuspg.github.io/posts/index.xml" rel="self" type="application/rss+xml" />
		
		<item>
			<title>Building Android Pie on Debian Buster</title>
			<link>https://markuspg.github.io/posts/aosp_pie_with_debian_buster/</link>
			<pubDate>Thu, 09 Apr 2020 17:24:56 +0200</pubDate>
			
			<guid>https://markuspg.github.io/posts/aosp_pie_with_debian_buster/</guid>
			<description>Until now I was falling back to Debian 9 &amp;ldquo;Stretch&amp;rdquo; for compiling the Android Open Source Project. This was due to the fact that compiling Android 8.1 &amp;ldquo;Oreo&amp;rdquo; failed to compile on Debian 10 &amp;ldquo;Buster&amp;rdquo; for me.
My most recent project is based on Android 9 &amp;ldquo;Pie&amp;rdquo; and for this reason I wanted to give Debian Buster a new shot. And indeed - it worked! I conducted a network install with the netinst installation medium installing only the base utilities as additional components in the task selector.</description>
			<content type="html"><![CDATA[<p>Until now I was falling back to <em>Debian 9 &ldquo;Stretch&rdquo;</em> for compiling the <em>Android Open Source Project</em>.
This was due to the fact that compiling <em>Android 8.1 &ldquo;Oreo&rdquo;</em> failed to compile on <em>Debian 10 &ldquo;Buster&rdquo;</em> for me.</p>

<p>My most recent project is based on <em>Android 9 &ldquo;Pie&rdquo;</em> and for this reason I wanted to give <em>Debian Buster</em> a new shot.
And indeed - it worked!
I conducted a network install with the netinst installation medium installing only the base utilities as additional components in the task selector.
After the installation I manually added the packages <code>build-essential</code>, <code>git</code>, <code>gnupg</code>, <code>libncurses5</code>, <code>libtinfo5</code>, <code>m4</code>, <code>rsync</code> and <code>zip</code> (my methodology was rather low-tech: waiting for build errors to occur and installing the package responsible for the build error).
This seems to be the baseline package selection required to sucessfully build <em>Andoid 9 &ldquo;Pie&rdquo;</em>.</p>
]]></content>
		</item>
		
		<item>
			<title>Compiling A More Recent Python Version On Debian Stretch</title>
			<link>https://markuspg.github.io/posts/compiling_python_on_debian/</link>
			<pubDate>Fri, 27 Mar 2020 13:26:29 +0200</pubDate>
			
			<guid>https://markuspg.github.io/posts/compiling_python_on_debian/</guid>
			<description>For a current work project I&amp;rsquo;m again dealing with building and modifying the Android Open Source Project. As usual my operating system of choice for that task is Debian Stretch (9.12).
Since my last Android builds Google&amp;rsquo;s repo tool for organizing the multitude of repositories that are needed for an Android build got finally updated from Python 2 to Python 3 (and that seemingly straight to Python 3.6).
Therefore on every invocation of repo init I got a complaint about an incompatible Python version being used (it still worked, but who does not like resolving error messages?</description>
			<content type="html"><![CDATA[<p>For a current work project I&rsquo;m again dealing with building and modifying the <em>Android Open Source Project</em>.
As usual my operating system of choice for that task is <em>Debian Stretch</em> (9.12).</p>

<p>Since my last Android builds Google&rsquo;s <code>repo</code> tool for organizing the multitude of repositories that are needed for an Android build got finally updated from <em>Python 2</em> to <em>Python 3</em> (and that seemingly straight to <em>Python 3.6</em>).</p>

<p>Therefore on every invocation of <code>repo init</code> I got a complaint about an incompatible Python version being used (it still worked, but who does not like resolving error messages?).
Fortunately Python makes it really easy to have multiple versions installed in parallel as explained in the following.</p>

<p>First the <em>cpython</em> repository has to be cloned and to be changed into.</p>

<pre><code>git clone https://github.com/python/cpython.git
cd cpython
</code></pre>

<p>In this example version <code>3.7.7</code> of the <em>cpython</em> Python implementation shall be build (this is the most recent one as of writing).
<em>cpython</em> can be checked out like this:</p>

<pre><code>git checkout v3.7.7
</code></pre>

<p>All configuration options for the build can be shown by the <code>--help</code> argument for <em>configure</em>.</p>

<pre><code>./configure --help | less
</code></pre>

<p><em>cpython</em> offers the possibility to rely on the operating system&rsquo;s libraries instead of those being included with the sources of <em>cpython</em>.
These can be installed on Debian through <code>apt</code>.</p>

<pre><code>apt install libexpat1-dev libffi-dev libmpdec-dev
</code></pre>

<p>Afterwards the build can be configured, executed and installed with these commands:</p>

<pre><code>./configure --enable-optimizations --with-system-expat  --with-system-ffi --with-system-libmpdec
make
sudo make altinstall
</code></pre>

<p><code>make altinstall</code> installs the <em>cpython</em> Python interpreter with a version suffix to not collide with the default system one.
To use specifically the newly installed <em>cpython</em> interpreter a virtual environment is created and then activated before running the commands that require a newer Python version.</p>
]]></content>
		</item>
		
		<item>
			<title>Quick AOSP Build</title>
			<link>https://markuspg.github.io/posts/quick_aosp/</link>
			<pubDate>Sat, 19 Oct 2019 20:46:54 +0200</pubDate>
			
			<guid>https://markuspg.github.io/posts/quick_aosp/</guid>
			<description>This is an attempt at trying out how fast AOSP can be built for a Nexus 5X from scratch including setting up a virtual machine with Debian Stretch in which the build will be done. For virtualization VMware Workstation 15 Player was used on a Windows 10 v1809 running on a DELL laptop with an Intel Core i9-8950HK and 32 GB RAM (eight virtual cores and 16 GB of RAM were allocated to the VM).</description>
			<content type="html"><![CDATA[<p>This is an attempt at trying out how fast AOSP can be built for a <em>Nexus 5X</em> from scratch including setting up a virtual machine with <em>Debian Stretch</em> in which the build will be done.
For virtualization <em>VMware Workstation 15 Player</em> was used on a <em>Windows 10 v1809</em> running on a <em>DELL</em> laptop with an <em>Intel Core i9-8950HK</em> and 32 GB RAM (eight virtual cores and 16 GB of RAM were allocated to the VM).</p>

<p>Start: ~19:30</p>

<p>First <em>Debian Stretch</em> was set up as default network install including the <em>Gnome</em> desktop environment.
As a baseline of development packages install the following ones:</p>

<pre><code>sudo apt install bison build-essential curl flex g++-multilib gcc-multilib git gnupg gperf lib32z-dev lib32ncurses5-dev libc6-dev-i386 libgl1-mesa-dev libx11-dev libxml2-utils m4 make openjdk-8-jdk open-vm-tools open-vm-tools-desktop unzip vim x11proto-core-dev xsltproc zip zlib1g-dev
</code></pre>

<p>Create a <code>bin</code> directory in your home directory and add it to your <code>PATH</code>.</p>

<pre><code>mkdir ~/bin
PATH=~/bin:$PATH
</code></pre>

<p>Google developed an own tool for handling the multitude of <em>Git</em> repositories which all combined make up the Android sources. This tool is called <code>repo</code> and can be installed to your <code>bin</code> directory with the following commands:</p>

<pre><code>curl https://storage.googleapis.com/git-repo-downloads/repo &gt; ~/bin/repo
chmod a+x ~/bin/repo
</code></pre>

<p>Check if <code>sha256sum ~/bin/repo</code> equals <code>d06f33115aea44e583c8669375b35aad397176a411de3461897444d247b6c220</code> (as of <em>repo</em> 1.25) and make the <code>repo</code> binary executable.</p>

<pre><code>chmod a+x ~/bin/repo
</code></pre>

<p>Create a working directory for all the <em>Android</em> sources and change into it:</p>

<pre><code>mkdir ~/aosp
cd ~/aosp
</code></pre>

<p>Configure your <em>Git</em> user:</p>

<pre><code>git config --global user.name &quot;Your Name&quot;
git config --global user.email &quot;you@example.com&quot;
</code></pre>

<p>Initialize the working directory (without the <code>-b android-8.1.0_r46</code> you get Android&rsquo;s current master):</p>

<pre><code>repo init -u https://android.googlesource.com/platform/manifest -b android-8.1.0_r46
repo sync
</code></pre>

<p>For finding the correct device driver binaries the tag has to be mapped to the correct build through <a href="https://source.android.com/setup/start/build-numbers#source-code-tags-and-builds" target="_blank">this table</a>. <code>android-8.1.0_r46</code> is mapped to <code>OPM6.171019.030.K1</code>.</p>

<p>The driver binaries for Nexus and Pixel devices can be obtained <a href="https://developers.google.com/android/drivers" target="_blank">here</a>.
Download both files for the <em>Nexus 5X</em> and the build <code>OPM6.171019.030.K1</code> and verify their checksums.</p>

<p>These self extracting scripts can be run as follows:</p>

<pre><code>cp -v ~/Downloads/extract-* .
./extract-lge-bullhead.sh
./extract-qcom-bullhead.sh
</code></pre>

<p>The actual build is started with these commands (the appended <code>aplay</code> command is only for an audible notification when the build is done):</p>

<pre><code>source build/envsetup.sh
lunch aosp_bullhead-userdebug
m -j12 &amp;&amp; paplay /usr/share/sounds/freedesktop/stereo/complete.oga
</code></pre>

<p>To be able to access the phone copy <a href="https://raw.githubusercontent.com/M0Rf30/android-udev-rules/master/51-android.rules" target="_blank">this</a> rules file to <code>/etc/udev/rules.d/</code>.</p>

<p>If your <em>Nexus 5X</em> has not been unlocked yet, you have to do this step first (Google is your friend).
Last you can flash the built Android system by running:</p>

<pre><code>fastboot flashall -w
</code></pre>

<p>Finish: 00:10</p>

<p>4:40 for building a custom Android image (not my first try though).
I&rsquo;m most impressed with the performance of my laptop, especially since I lost about 45 minutes fiddling with a problem caused by packages I had forgotten to install ;-)</p>
]]></content>
		</item>
		
		<item>
			<title>(Re-)Installing a HP LaserJet P1606dn</title>
			<link>https://markuspg.github.io/posts/hp1606dn/</link>
			<pubDate>Thu, 17 Oct 2019 17:45:23 +0200</pubDate>
			
			<guid>https://markuspg.github.io/posts/hp1606dn/</guid>
			<description>As about every two years I upgraded my mother&amp;rsquo;s computer to the newest Debian release. This time from Stretch to Buster (thanks to the Debian community for this great release again!).
For years I bought HP printers because they worked really nice with Linux. Last I bought a HP LaserJet P1606dn. This one harmed the Linux happiness. It needs some binary plugin and this regularly is a pain to install.</description>
			<content type="html"><![CDATA[<p>As about every two years I upgraded my mother&rsquo;s computer to the newest Debian release.
This time from <em>Stretch</em> to <em>Buster</em> (thanks to the Debian community for this great release again!).</p>

<p>For years I bought <em>HP</em> printers because they worked really nice with Linux.
Last I bought a <em>HP LaserJet P1606dn</em>.
This one harmed the Linux happiness.
It needs some binary plugin and this regularly is a pain to install.</p>

<p>The upgrade broke the previously working installed printer.
So I set off to install it again.
I tried installing the plugin again and again with <code>hp-plugin</code> and <code>hp-setup</code>.
Both tools again and again told me the plugin was successfully installed but on the next call they requested installation again.</p>

<p>After some googling I found <a href="https://www.linuxquestions.org/questions/linux-software-2/hplip-keeps-looping-at-plug-in-installation-4175647505/" target="_blank">this post</a> on <a href="https://www.linuxquestions.org" target="_blank">linuxquestions.org</a>.
I tried running <code>hp-setup</code> with the <code>-g</code> flag and also found some files missing.
After running these commands everything worked fine:</p>

<pre><code>ln -s /usr/lib/sane /usr/lib/i386-linux-gnu/sane
mkdir /usr/lib64/x86_64-linux-gnu
ln -s /usr/lib64/sane /usr/lib64/x86_64-linux-gnu/sane
</code></pre>

<p>Thanks to <em>zaskar_84</em>!</p>
]]></content>
		</item>
		
		<item>
			<title>Wrapping a C&#43;&#43; SDK with C&#43;&#43;/CLI</title>
			<link>https://markuspg.github.io/posts/cppcli/</link>
			<pubDate>Tue, 16 Jul 2019 21:54:45 +0200</pubDate>
			
			<guid>https://markuspg.github.io/posts/cppcli/</guid>
			<description>Recently at work I had to wrap a C++ SDK for usage in C#. My first try was using P/Invoke which seems to be the more portable way but soon this approach prove to be far too limited (through having to rely only on C linkage). Therefore my coworkers and me decided to utilize C++/CLI for which an introduction can be found here.
One basic problem is how to embed the unmanaged C++ classes from the SDK in managed C++/CLI ones.</description>
			<content type="html"><![CDATA[<p>Recently at work I had to wrap a C++ SDK for usage in C#.
My first try was using <em>P/Invoke</em> which seems to be the more portable way but soon this approach prove to be far too limited (through having to rely only on <em>C</em> linkage).
Therefore my coworkers and me decided to utilize <em>C++/CLI</em> for which an introduction can be found <a href="https://docs.microsoft.com/en-us/cpp/dotnet/dotnet-programming-with-cpp-cli-visual-cpp?view=vs-2019" target="_blank">here</a>.</p>

<p>One basic problem is how to embed the <em>unmanaged C++</em> classes from the SDK in <em>managed C++/CLI</em> ones.
Fortunately managed classes can have pointers to unmanaged objects as private data members, so I created the base class of the inheritance hierarchy mirroring the SDK&rsquo;s inheritance hierarchy like this:</p>

<pre><code>public ref class WrapperObject {
public:
    WrapperObject(SdkObject *const argObj) :
        obj(argObj)
    {}
    # The destructor should do nothing more than calling the finalizer
    virtual ~WrapperObject() { this-&gt;!WrapperObject(); }
    # The finalizer frees the internally held unmanaged object's instance
    !WrapperObject() { delete obj; }

    void DoSomething() { obj-&gt;DoSomething(); }

private:
    SdkObject *obj = nullptr;
};
</code></pre>

<p>The <code>void DoSomething()</code> member function gives an example how the managed object can forward calls to the unmanaged object.</p>
]]></content>
		</item>
		
		<item>
			<title>Init</title>
			<link>https://markuspg.github.io/posts/init/</link>
			<pubDate>Thu, 20 Jun 2019 12:26:21 +0200</pubDate>
			
			<guid>https://markuspg.github.io/posts/init/</guid>
			<description>This is just a test. Hello World!</description>
			<content type="html"><![CDATA[<p>This is just a test. Hello World!</p>
]]></content>
		</item>
		
	</channel>
</rss>
